generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String               @id @default(uuid())
  name                      String
  email                     String               @unique
  phone                     String
  gdcNumber                 String               @unique
  password                  String?
  roleName                  RoleName
  role                      Role                 @relation(fields: [roleName], references: [name])
  paymentProviderCustomerId String?
  rating                    Float?
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @default(now())
  courses                   Course[]
  images                    Image[]
  videos                    Video[]
  passwordResetTokens       PasswordResetToken[]
  reviewsLeft               Review[]
  dentorReviews             DentorReviews[]
}

model Role {
  name      RoleName @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  users     User[]
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime @default(dbgenerated("NOW() + interval '1 day'"))
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  slug      String   @id
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  courses   Course[]
}

model Course {
  id              String        @id @default(uuid())
  type            CourseType
  price           Int
  cpdValue        Float
  name            String
  description     String
  dentorId        String
  startDate       DateTime?
  endDate         DateTime?
  featuredUntil   DateTime?
  rating          Float         @default(0)
  availablePlaces Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  dentor          User          @relation(fields: [dentorId], references: [id])
  category        Category[]
  videos          CourseVideo[]
}

model File {
  id        String   @id @default(uuid())
  size      FileSize
  name      String
  mime      String
  imageId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  image     Image    @relation(fields: [imageId], references: [id])
}

model Image {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  files     File[]
  videos    Video[]
}

model Video {
  id          String        @id @default(uuid())
  url         String
  title       String
  description String
  userId      String
  thumbnailId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  thumbnail   Image         @relation(fields: [thumbnailId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  courses     CourseVideo[]
}

model CourseVideo {
  id         String   @id @default(uuid())
  videoId    String
  courseId   String
  moduleName String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  video      Video    @relation(fields: [videoId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])
}

model Review {
  id            String          @id @default(uuid())
  title         String
  content       String
  rating        Float
  authorId      String
  author        User            @relation(fields: [authorId], references: [id])
  dentorReviews DentorReviews[]
}

model DentorReviews {
  dentorId String
  dentor   User   @relation(fields: [dentorId], references: [id])
  reviewId String
  review   Review @relation(fields: [reviewId], references: [id])

  @@id([dentorId, reviewId])
}

enum RoleName {
  Dentist
  Dentor
}

enum CourseType {
  Video
  InPerson
}

enum FileSize {
  Thumbnail
  Original
}
