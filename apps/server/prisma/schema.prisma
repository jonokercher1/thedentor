generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                   @id @default(uuid())
  name                      String?
  email                     String                   @unique
  phone                     String?
  gdcNumber                 String?                  @unique
  bio                       String?
  roleName                  RoleName
  role                      Role                     @relation(fields: [roleName], references: [name])
  paymentProviderCustomerId String?
  rating                    Float?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @default(now())
  courses                   Course[]                 @relation("CoursesCreated")
  purchasedCourses          Course[]                 @relation("PurchasedCourses")
  images                    Image[]
  videos                    Video[]
  reviewsLeft               Review[]                 @relation("ReviewsLeft")
  dentorReviews             Review[]                 @relation("DentorReviews")
  oneTimeTokens             OneTimePassword[]
  apiKeys                   ApiKey[]
  courseFeedback            CourseFeedbackResponse[]
  cpdCertificates           CpdCertificate[]
}

model Role {
  name      RoleName @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  users     User[]
}

model OneTimePassword {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String
  expiresAt DateTime @default(dbgenerated("NOW() + interval '10 minutes'"))
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  slug      String   @id
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  courses   Course[]
}

model Course {
  id                      String                   @id @default(uuid())
  type                    CourseType
  price                   Int
  cpdValue                Float
  name                    String
  description             String
  dentorId                String
  startDate               DateTime?
  endDate                 DateTime?
  featuredUntil           DateTime?
  rating                  Float                    @default(0)
  availablePlaces         Int
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now())
  dentor                  User                     @relation("CoursesCreated", fields: [dentorId], references: [id])
  ownedByUsers            User[]                   @relation("PurchasedCourses")
  category                Category[]
  videos                  CourseVideo[]
  feedbackQuestions       CourseFeedbackQuestion[]
  feedback                CourseFeedbackResponse[]
  cpdCertificates         CpdCertificate[]
  cpdCertificateTemplates CpdCertificateTemplate[]
}

model File {
  id        String   @id @default(uuid())
  size      FileSize
  name      String
  mime      String
  imageId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  image     Image    @relation(fields: [imageId], references: [id])
}

model Image {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  files     File[]
  videos    Video[]
}

model Video {
  id          String        @id @default(uuid())
  url         String
  title       String
  description String
  userId      String
  thumbnailId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  thumbnail   Image         @relation(fields: [thumbnailId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  courses     CourseVideo[]
}

model CourseVideo {
  id         String   @id @default(uuid())
  videoId    String
  courseId   String
  moduleName String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  video      Video    @relation(fields: [videoId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  title     String
  content   String
  rating    Float
  authorId  String
  dentorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  author    User     @relation("ReviewsLeft", fields: [authorId], references: [id])
  dentor    User     @relation("DentorReviews", fields: [dentorId], references: [id])
}

model ApiKey {
  id        String    @id @default(uuid())
  key       String    @unique
  dentorId  String
  dentor    User      @relation(fields: [dentorId], references: [id])
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model CourseFeedbackQuestion {
  id        String                     @id @default(uuid())
  question  String
  type      CourseFeedbackQuestionType
  order     Int
  courseId  String
  course    Course                     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime                   @default(now())
  updatedAt DateTime                   @default(now())

  @@unique([courseId, order])
}

model CourseFeedbackResponse {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  answers   Json
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CpdCertificateTemplate {
  id        String   @id @default(uuid())
  courseId  String
  fileUrl   String? // TODO: we should make this a file object but this will do for now
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CpdCertificate {
  id        String   @id @default(uuid())
  fileUrl   String? // TODO: we should make this a file object but this will do for now
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
}

enum RoleName {
  Dentist
  Dentor
}

enum CourseType {
  Video
  InPerson
}

enum FileSize {
  Thumbnail
  Original
}

enum CourseFeedbackQuestionType {
  Rating
  Text
  YesNo
}
